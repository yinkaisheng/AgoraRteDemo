name=setClientRole
editable=0
code=

self.ret = self.rtcEngine.setClientRole(role=1)

----boundary----

name=setParameters
editable=0
code=

self.ret = self.rtcEngine.setParameters('{"key": value}')

----boundary----

name=updateChannelMediaOptionsEx
editable=0
code=

channelName = self.channelNameEdit.text().strip()
uid = int(self.uidExEdit.text())
rtcConnection = agsdk.RtcConnection(channelName, uid)
options = agsdk.ChannelMediaOptions()
options.publishSecondaryCameraTrack = False
self.ret = self.rtcEngine.updateChannelMediaOptionsEx(rtcConnection, options)

----boundary----

name=getVideoDeviceCapabilities
editable=0
code=

devices = self.rtcEngine.enumerateVideoDevices()
outputs = []
for deviceName, deviceId in devices:
    capabilities = self.rtcEngine.getVideoDeviceCapabilities(deviceId)
    outputs.append(f'{deviceName}, {deviceId}, CapabilitiesCount={len(capabilities)}\n')
    for cap in capabilities:
        outputs.append(f'    width: {cap[0]:<4} height: {cap[1]:<4} fps: {cap[2]}\n')
self.codeDlg.outputEdit.appendPlainText(''.join(outputs))

----boundary----

name=getScreenCaptureSources
editable=0
code=

import struct
from PIL import Image

self.ret, sources = self.rtcEngine.getScreenCaptureSources(thumbSize=(300,200), iconSize=(40,40), includeScreen=False)
if self.ret == 0:
    sourcesPath = 'agora_screen_sources.data'
    with open(sourcesPath, 'rb') as fin:
        while 1:
            indexData = fin.read(4)
            if not indexData:
                break
            index = struct.unpack('=I', indexData)[0]
            thumbLenData = fin.read(12)
            thumbLen, width, height = struct.unpack('=III', thumbLenData)
            if thumbLen > 0:
                thumbData = fin.read(thumbLen)
                image = Image.frombytes('RGBA', (width, height), thumbData, 'raw', 'BGRA')
                image.save(f'ag_thumb{index:02}.bmp')
            iconLenData = fin.read(12)
            iconLen, width, height = struct.unpack('=III', iconLenData)
            if iconLen > 0:
                iconData = fin.read(iconLen)
                image = Image.frombytes('RGBA', (width, height), iconData, 'raw', 'BGRA')
                image.save(f'ag_icon{index:02}.bmp')
    #os.remove(sourcesPath)

----boundary----

name=startDeviceTest
editable=0
code=

view = int(self.videoLabels[viewIndex].winId())
self.ret = self.rtcEngine.startVideoDeviceTest(view)
self.delayCall(timeMs=10000, func=self.rtcEngine.stopVideoDeviceTest)

----boundary----

name=trapezoid_corr_option
editable=0
code=

self.ret = self.rtcEngine.setExtensionProperty('agora', 'beauty', 'trapezoid_corr_option', r'''
{
    "assistLine": 1,
    "setDragPoint": {
        "dragDstPoint": {
            "x": 0.100000,
            "y": 0.100000
        },
        "dragSrcPoint": {
            "x": 0.200000,
            "y": 0.200000
        },
        "dragFinished": 1
    },
    "assistLine": 1,
    "enable": 1
}
''')

----boundary----

name=startPlaybackDeviceTest
editable=0
code=

self.ret = self.rtcEngine.startPlaybackDeviceTest(r'D:\Media\Music\Lovelovelove.mp3')
self.delayCall(timeMs=10000, func=self.rtcEngine.stopPlaybackDeviceTest)

----boundary----

name=stopPlaybackDeviceTest
editable=0
code=

self.ret = self.rtcEngine.stopPlaybackDeviceTest()

----boundary----

name=startRecordingDeviceTest
editable=0
code=

self.ret = self.rtcEngine.startRecordingDeviceTest(indicationInterval=1000)
self.delayCall(timeMs=10000, func=self.rtcEngine.stopRecordingDeviceTest)

----boundary----

name=stopRecordingDeviceTest
editable=0
code=

self.ret = self.rtcEngine.stopRecordingDeviceTest()

----boundary----

name=setLocalTrapezoidCorrectionOptions
editable=0
code=

option = {'assistLine': 1, 'autoCorrect': 1}
self.ret = self.rtcEngine.setLocalTrapezoidCorrectionOptions(option, sourceType=0)

----boundary----

name=getLocalTrapezoidCorrectionOptions
editable=0
code=

self.ret = self.rtcEngine.getLocalTrapezoidCorrectionOptions(sourceType=0)

----boundary----

name=getRemoteTrapezoidCorrectionOptions
editable=0
code=

self.ret = self.rtcEngine.getRemoteTrapezoidCorrectionOptions(uid=111)

----boundary----

name=setCameraDeviceOrientation
editable=0
code=

self.ret = self.rtcEngine.setCameraDeviceOrientation(orientation=180, sourceType=0)

----boundary----

name=applyVideoOrientationToRemote
editable=0
code=

remoteUid = 111
self.ret = self.rtcEngine.applyVideoOrientationToRemote(uid=remoteUid, orientation=180)

----boundary----

name=applyVideoOrientationToRemoteEx
editable=0
code=

remoteUid = 111
rtcConnection = agsdk.RtcConnection(self.channelNameEdit.text().strip(), int(self.uidExEdit.text()))
self.ret = self.rtcEngine.applyVideoOrientationToRemoteEx(uid=remoteUid, orientation=180, connection=rtcConnection)

----boundary----

name=takeSnapshot
editable=0
code=

self.snapCount = 0
def onSnapshotTaken(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['errCode'] == 0 and jsInfo['filePath']:
        self.snapCount += 1
        subprocess.Popen(jsInfo['filePath'], shell=True)
        if self.snapCount < 2:
            self.ret = self.rtcEngine.takeSnapshot(uid=0, filePath=r'snap2.jpg', rect=(0.0, 0.0, 0.75, 0.75))
MainWindow.onSnapshotTaken = onSnapshotTaken
self.rtcEngineEventHandler['onSnapshotTaken'] = self.onSnapshotTaken

uid = 0
self.ret = self.rtcEngine.takeSnapshot(uid=uid, filePath=r'snap.jpg', rect=(0.0, 0.0, 0.75, 0.75))

----boundary----

name=takeSnapshotEx
editable=0
code=

def onSnapshotTaken(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['errCode'] == 0 and jsInfo['filePath']:
        subprocess.Popen(jsInfo['filePath'], shell=True)
MainWindow.onSnapshotTaken = onSnapshotTaken
self.rtcEngineEventHandler['onSnapshotTaken'] = self.onSnapshotTaken

rtcConnection = agsdk.RtcConnection(self.channelNameEdit.text().strip(), int(self.uidExEdit.text()))
uid = 0
self.ret = self.rtcEngine.takeSnapshotEx(uid, r'snap.jpg', rect=(0.0, 0.0, 0.75, 0.75), connection=rtcConnection)

----boundary----

name=startServerSuperResolution
editable=0
code=

def onServerSuperResolutionResult(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['httpStatusCode'] == 200 and jsInfo['imagePath']:
        subprocess.Popen(jsInfo['imagePath'], shell=True)
MainWindow.onServerSuperResolutionResult = onServerSuperResolutionResult
self.rtcEngineEventHandler['onServerSuperResolutionResult'] = self.onServerSuperResolutionResult

token = self.configJson['tokenUid']
token = 'fakeToken'
self.ret = self.rtcEngine.startServerSuperResolution(token, r'snap.jpg', 2.0, 5)

----boundary----

name=组合: 截图和局部超分
editable=1
code=

def onSnapshotTaken(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['errCode'] == 0 and jsInfo['filePath']:
        token = self.configJson['tokenUid']
        token = 'fakeToken'
        self.rtcEngine.startServerSuperResolution(token, imagePath=jsInfo['filePath'], scale=2.0, timeoutSeconds=5)
MainWindow.onSnapshotTaken = onSnapshotTaken
self.rtcEngineEventHandler['onSnapshotTaken'] = self.onSnapshotTaken

def onServerSuperResolutionResult(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['httpStatusCode'] == 200 and jsInfo['imagePath']:
        subprocess.Popen(jsInfo['imagePath'], shell=True)
MainWindow.onServerSuperResolutionResult = onServerSuperResolutionResult
self.rtcEngineEventHandler['onServerSuperResolutionResult'] = self.onServerSuperResolutionResult

uid = 0
self.ret = self.rtcEngine.takeSnapshot(uid, r'snap.jpg', rect=(0.0, 0.0, 0.5, 0.5))

----boundary----
