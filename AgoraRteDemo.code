name=setClientRole
editable=0
code=
self.rtcEngine.setClientRole(role=1)

----boundary----

name=updateChannelMediaOptionsEx
editable=0
code=

channelName = self.channelNameEdit.text().strip()
uid = int(self.uidExEdit.text())
rtcConnection = agsdk.RtcConnection(channelName, uid)
options = agsdk.ChannelMediaOptions()
options.publishSecondaryCameraTrack = False
self.rtcEngine.updateChannelMediaOptionsEx(rtcConnection, options)

----boundary----

name=takeSnapshot
editable=0
code=

def onSnapshotTaken(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['errCode'] == 0 and jsInfo['filePath']:
        subprocess.Popen(jsInfo['filePath'], shell=True)
MainWindow.onSnapshotTaken = onSnapshotTaken
self.callbackMethods['onSnapshotTaken'] = self.onSnapshotTaken

channelName = self.channelNameEdit.text().strip()
uid = 0
self.rtcEngine.takeSnapshot(channelName, uid, r'd:/downloads/snap.jpg', rect=(0.0, 0.0, 0.75, 0.75))

----boundary----

name=startServerSuperResolution
editable=0
code=

def onServerSuperResolutionResult(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['httpStatusCode'] == 200 and jsInfo['imagePath']:
        subprocess.Popen(jsInfo['imagePath'], shell=True)
MainWindow.onServerSuperResolutionResult = onServerSuperResolutionResult
self.callbackMethods['onServerSuperResolutionResult'] = self.onServerSuperResolutionResult

self.rtcEngine.startServerSuperResolution(self.configJson['tokenUid'], r'd:/downloads/snap.jpg', 2.0, 5)

----boundary----

name=组合: 截图和局部超分
editable=1
code=
def onSnapshotTaken(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['errCode'] == 0 and jsInfo['filePath']:
        self.rtcEngine.startServerSuperResolution(self.configJson['tokenUid'], jsInfo['filePath'], 2.0, 5)
MainWindow.onSnapshotTaken = onSnapshotTaken
self.callbackMethods['onSnapshotTaken'] = self.onSnapshotTaken

def onServerSuperResolutionResult(self, userData: str, callbackTimeSinceEpoch: int, funcName: str, jsStr: str, jsInfo: Dict) -> None:
    self.codeDlg.outputEdit.appendPlainText(f'{funcName}: {jsStr}\n')
    if jsInfo['httpStatusCode'] == 200 and jsInfo['imagePath']:
        subprocess.Popen(jsInfo['imagePath'], shell=True)
MainWindow.onServerSuperResolutionResult = onServerSuperResolutionResult
self.callbackMethods['onServerSuperResolutionResult'] = self.onServerSuperResolutionResult

channelName = self.channelNameEdit.text().strip()
uid = 0
self.rtcEngine.takeSnapshot(channelName, uid, r'd:/downloads/snap.jpg', rect=(0.25, 0.25, 0.75, 0.75))

----boundary----
